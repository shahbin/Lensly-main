<%- include("../../views/partials/user/header", { user: user }) %>

<style>
  .empty-wishlist {
  text-align: center;
  padding: 4rem 1rem;
}

.empty-wishlist__title {
  font-size: 2rem;
  color: #333;
  margin-bottom: 1rem;
}

.empty-wishlist__text {
  color: #666;
  margin-bottom: 2rem;
}

.empty-wishlist .btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  background-color: #007bff;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.empty-wishlist .btn:hover {
  background-color: #0056b3;
}
</style>

<main class="main">
    <!--=============== BREADCRUMB ===============-->
    <section class="breadcrumb" style="width: 100%; height: 80px; display: flex; margin-top: -40px; justify-content: center; align-items: center; background-color: #ffff;">
      <ul class="breadcrumb__list container" style="margin-left: -25px;">
        <li><a href="/" class="breadcrumb__link" style="font-size: 12px;">Home</a></li>
        <li><span class="breadcrumb__link">></span></li>
        <li><a class="breadcrumb__link" style="font-size: 12px;">Wishlist</a></li>
      </ul>
    </section>
    

    <!--=============== WISHLIST ===============-->
    <section class="wishlist section--lg container">
      <div class="table__container" >
        <% if (wishlist && wishlist.length > 0) { %>
          <div class="tb" style="margin-left: -90px;">
          <div class="tb" style="margin-left: -90px;">
          <table class="table">
            <thead>
              <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Price</th>
                <th>Stock Status</th>
                <th>Action</th>
                <th>Remove</th>
              </tr>
            </thead>
            <tbody>
              <% wishlist.forEach(item => { %>
                <tr>
                  <td>
                    <img
                      src="/admin-assets/imgs/brands/<%= item.product.productImage[0] %>"
                      alt="<%= item.product.productName %>"
                      class="table__img"
                    />
                  </td>
                  <td>
                    <h3 class="table__title">
                      <%= item.product.productName %>
                    </h3>
                  </td>
                  <td>
                    <span class="table__price">â‚¹<%= item.product.price %></span>
                  </td>
                  <td>
                    <span class="table__stock <%= item.product.quantity > 0 ? 'in-stock' : 'out-of-stock' %>">
                      <%= item.product.quantity > 0 ? 'In Stock' : 'Out of Stock' %>
                    </span>
                  </td>
                  <td>
                    <% if (item.product.quantity > 0) { %>
                      <a href="#" class="btn btn--sm" onclick="handleAddToCart('<%= item.product._id %>', '<%= item.product.quantity %>')">Add to Cart</a>
                    <% } else { %>
                      <button class="btn btn--sm" disabled>Add to Cart</button>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn-remove" data-product-id="<%= item.product._id %>">
                      <i class="fi fi-rs-trash table__trash"></i>
                    </button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <% } else { %>
          <div class="empty-cart" style="text-align: center; display: flex; flex-direction: column; align-items: center; padding: 40px 20px; justify-content: center;">
            <h2 style="font-size: 24px; color: #333; margin: 0 0 10px 0;">Your wishlist is empty</h2>
            <p style="color: #666; margin: 0 0 30px 0;">Looks like you haven't added anything to your wishlist yet.</p>
            <a href="/shop" class="btn flex btn__md" style="display: flex; align-items: center; background-color: #2b5741; color: white; padding: 12px 20px; border-radius: 6px; text-decoration: none; line-height: 1;">
              <i class="fi-rs-shopping-bag" style="margin-right: 8px;"></i> Continue Shopping
            </a>
          </div>
        <% } %>
      
      </div>
    </section>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
document.addEventListener('DOMContentLoaded', function () {
  document.addEventListener('click', async function (event) {
    const button = event.target.closest('.btn-remove');

    if (button) {
        const productId = button.dataset.productId;
    
      if (!productId) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Product ID not found!',
        });
        return;
      }

      try {
        const response = await fetch(`/remove/${productId}`, {
          method: 'POST', 
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId }) 
        });

        const data = await response.json();

        if (data.success) {
          const row = button.closest('tr');
          if (row) {
            row.remove();
          }

          const tbody = document.querySelector('tbody');
          if (!tbody || !tbody.querySelector('tr')) {
            const tableContainer = document.querySelector('.table__container');
            if (tableContainer) {
              tableContainer.innerHTML = `<div class="empty-cart" style="text-align: center; display: flex; flex-direction: column; align-items: center; padding: 40px 20px; justify-content: center;">
            <h2 style="font-size: 24px; color: #333; margin: 0 0 10px 0;">Your wishlist is empty</h2>
            <p style="color: #666; margin: 0 0 30px 0;">Looks like you haven't added anything to your wishlist yet.</p>
            <a href="/shop" class="btn flex btn__md" style="display: flex; align-items: center; background-color: #2b5741; color: white; padding: 12px 20px; border-radius: 6px; text-decoration: none; line-height: 1;">
              <i class="fi-rs-shopping-bag" style="margin-right: 8px;"></i> Continue Shopping
            </a>
          </div>`;
            }
          }

          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: 'Product removed from wishlist',
            showConfirmButton: false,
            timer: 2000
          });

        } else {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: data.message || 'Failed to remove product',
            showConfirmButton: false,
            timer: 1500
          });
        }
      } catch (error) {
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'error',
          title: 'Failed to remove product',
          showConfirmButton: false,
          timer: 1500
        });
      }
    }
  });
});


const cartAPI = {
  async addToCart(productId, quantity = 1) {
    try {
      const response = await fetch('/cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, quantity }),
      });

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error adding item to cart:', error);
      return { 
        success: false, 
        status: 'error', 
        message: 'Something went wrong. Please try again later.' 
      }; 
    }
  },

  async updateQuantity(productId, quantity) {
    try {
      const response = await fetch('/update-cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId, quantity })
      });

      if (!response.ok) throw new Error('Update failed');
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to update quantity');
    }
  },

  async removeItem(productId) {
    try {
      const response = await fetch(`/removeFrom-cart/${productId}`, {
        method: 'DELETE'
      });

      if (!response.ok) throw new Error('Remove failed');
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to remove item');
    }
  }
};

async function handleAddToCart(productId, availableStock) {
  try {    
    availableStock = parseInt(availableStock, 10);
    
    if (isNaN(availableStock) || availableStock <= 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Out of Stock!',
        text: 'Sorry, this product is currently unavailable.',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'Continue Shopping'
      });
      return;
    }

    Swal.fire({
      title: 'Adding to cart...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    const response = await cartAPI.addToCart(productId, 1); 
    
    Swal.close();

    if (!response.success) {
      if (response.status === 'out_of_stock') {
        Swal.fire({
          icon: 'warning',
          title: 'Out of Stock!',
          text: response.message || 'Sorry, this product is currently unavailable.',
          confirmButtonColor: '#3085d6',
          confirmButtonText: 'Continue Shopping'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = "/shop";
          }
        });
        return;
      }
      
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: response.message || 'Failed to add item to cart',
        confirmButtonColor: '#d33'
      });
      return;
    }

    Swal.fire({
      icon: 'success',
      title: 'Added to Cart!',
      text: 'Your item has been successfully added to the cart.',
      confirmButtonColor: '#3085d6',
      showCancelButton: true,
      confirmButtonText: 'Go to Cart',
      cancelButtonText: 'Continue Shopping',
      cancelButtonColor: '#6c757d'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = "/cart";
      } else {
        window.location.href = "/shop";
      }
    });

  } catch (error) {
    console.error('Error in handleAddToCart:', error);
    Swal.fire({
      icon: 'error',
      title: 'Oops...',
      text: 'Something went wrong. Please try again later.',
      confirmButtonColor: '#d33'
    });
  }
}

function updateQuantity(action) {
  const quantityInput = document.getElementById('quantity');
  if (!quantityInput) return; 
  
  let quantity = parseInt(quantityInput.value);
  const maxQuantity = parseInt(quantityInput.max);
  const availableStock = parseInt(quantityInput.dataset.stock);

  if (action === 'increase' && quantity < maxQuantity) {
    quantity++;
  } else if (action === 'decrease' && quantity > 1) {
    quantity--;
  }

  quantityInput.value = quantity;
  toggleIncreaseButton(quantity, maxQuantity, availableStock);
}



  

  </script>

<%- include("../../views/partials/user/footer") %>
